name: Python CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - develop
      - feature/*
    tags:
      - 'v*.*.*'

jobs:
  test:
    name: Python ${{ matrix.os }}-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox
      - name: Run tox targets for ${{ matrix.python-version }}
        # Run tox using the version of Python in `PATH`
        run: tox -e py -- junit/test-results-${{ matrix.python-version }}.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v1
        with:
          name: pytest-results-${{ matrix.python }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install pep517 and twine
        run: python -m pip install pep517 twine
      - name: Build package
        run: python -m pep517.build --source --binary .
      - name: List result
        run: ls -l dist
      - name: Check long_description
        run: python -m twine check dist/*

  install-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    name: Verify dev env
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install in dev mode
        run: python -m pip install -e .[dev]
      - name: Import package
        run: python -c 'import mypackage; print(mypackage.__version__)'

  docker-build:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push Docker images
        uses: docker/build-push-action@v1
        with:
         username: ${{ github.repository_owner }}
         password: ${{ secrets.GITHUB_TOKEN }}
         registry: docker.pkg.github.com
         repository: ${{github.repository}}/mypackage
         tag_with_ref: true
         add_git_labels: true
         cache_froms: python:3.8-buster,python:3.8-slim-buster,docker.pkg.github.com/jellevandehaterd/mypackage/mypackage
         push: ${{ startsWith(github.ref, 'refs/tags/') }}
         build_args: PYTHON_VERSION=3.8

      - name: Test
        run: |
          docker run --rm --name test_container docker.pkg.github.com/jellevandehaterd/mypackage/mypackage:${GITHUB_REF##*/}
